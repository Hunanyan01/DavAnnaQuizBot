import json

# ’Ü’•÷Ä’°’Æ’ù JSON ÷Ü’°’µ’¨ ’Ø’°’¥ ’ø’æ’µ’°’¨
questions = [
    {
        "id": 2,
        "topic": "Java",
        "question": "‘ª’û’∂’π ’ß ’°’∂’∏÷Ç’¥ final keyword-’® class-’´ ’æ÷Ä’° ÷Ö’£’ø’°’£’∏÷Ä’Æ’•’¨’∏÷Ç ’§’•’∫÷Ñ’∏÷Ç’¥÷â",
        "options": [
            "’Ü’∑’∏÷Ç’¥ ’ß, ’∏÷Ä class-’® ’π’∫’•’ø÷Ñ ’ß ’∏÷Ç’∂’•’∂’° constructor",
            "’Ü’∑’∏÷Ç’¥ ’ß, ’∏÷Ä class-’´÷Å ’∞’∂’°÷Ä’°’æ’∏÷Ä ’π’ß ’Ω’ø’•’≤’Æ’•’¨ ÷Ö’¢’µ’•’Ø’ø",
            "’Ü’∑’∏÷Ç’¥ ’ß, ’∏÷Ä class-’® ’π’´ ’Ø’°÷Ä’∏’≤ ’™’°’º’°’∂’£’æ’•’¨",
            "’Ü’∑’∏÷Ç’¥ ’ß, ’∏÷Ä class-’® ’π’´ ’Ø’°÷Ä’∏’≤ ’∏÷Ç’∂’•’∂’°’¨ static method"
        ],
        "correct": 3,
        "explanations": {
            "1": "‚ö†Ô∏è Constructor-’® class-’´ ’¥’°’Ω ’ß ÷á final-’® ’π’´ ’°÷Ä’£’•’¨’∏÷Ç’¥ ’§’°÷â",
            "2": "‚ö†Ô∏è ’ï’¢’µ’•’Ø’ø ’Ω’ø’•’≤’Æ’•’¨’® ’©’∏÷Ç’µ’¨’°’ø÷Ä’æ’°’Æ ’ß final class-’´÷Å÷â",
            "4": "‚ö†Ô∏è Static ’¥’•’©’∏’§’® ’Ø’°’∫ ’π’∏÷Ç’∂’´ final-’´ ’∞’•’ø÷â",
            "3": "‚úÖ ’É’´’∑’ø ’ß÷â Final class-’® ’π’´ ’Ø’°÷Ä’∏’≤ ’™’°’º’°’∂’£’æ’•’¨÷â"
        },
        "short_explanation": "üîí final class-’•÷Ä’® ÷É’°’Ø ’•’∂ ’™’°’º’°’∂’£’¥’°’∂ ’∞’°’¥’°÷Ä÷â"
    }
]

# ’ñ’∏÷Ç’∂’Ø÷Å’´’°’ù ’∞’°÷Ä÷Å’® ’ø’∫’•’¨’∏÷Ç ’∞’°’¥’°÷Ä
def display_question(q):
    print(f"‚ùì {q['question']}\n")
    for i, option in enumerate(q['options'], start=1):
        print(f"{i}Ô∏è‚É£ {option}")
    print("\nüëâ ’ä’°’ø’°’Ω’≠’°’∂’´÷Ä ’¥’´’°’µ’∂ ’©’´’æ’® (÷Ö÷Ä.’ù 3)\n")

# ’ñ’∏÷Ç’∂’Ø÷Å’´’°’ù ’∫’°’ø’°’Ω’≠’°’∂’® ’Ω’ø’∏÷Ç’£’•’¨’∏÷Ç ’∞’°’¥’°÷Ä
def check_answer(q, answer):
    correct = str(q["correct"])
    explanation = q["explanations"].get(str(answer), "‚ùå ’ç’≠’°’¨ ’ø’°÷Ä’¢’•÷Ä’°’Ø÷â")
    print("\nüì£ ’ä’°’ø’°’Ω’≠’°’∂’§’ù", "’É’´’∑’ø ’ß ‚úÖ" if str(answer) == correct else "’ç’≠’°’¨ ‚ùå")
    print(explanation)
    print("\nüìå", q["short_explanation"])

# ’ï’£’ø’°’£’∏÷Ä’Æ’∏÷Ç’¥
display_question(questions[0])
user_answer = input("‚úçÔ∏è ’î’∏ ’∫’°’ø’°’Ω’≠’°’∂’®: ")
check_answer(questions[0], user_answer)
