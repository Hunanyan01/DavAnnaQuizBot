import asyncio
from telegram import Update
from telegram.ext import ContextTypes

user_state = {}

async def send_timed_question(update: Update, context: ContextTypes.DEFAULT_TYPE, question: dict, timeout: int = 20, reply_markup=None):
    user_id = str(update.effective_user.id)

    old_text = f"üïí ’à÷Ç’∂’•’Ω {timeout} ’æ’°’µ÷Ä’Ø’µ’°’∂ ’∫’°’ø’°’Ω’≠’°’∂’´÷Ä.\n\n‚ùì {question['question']}"

    new_text = f"""‚ùì <b>{question['question']}</b>

1Ô∏è‚É£ {question['options'][0]}
2Ô∏è‚É£ {question['options'][1]}
3Ô∏è‚É£ {question['options'][2]}
4Ô∏è‚É£ {question['options'][3]}

üïí ’à÷Ç’∂’•’Ω {timeout} ’æ’°’µ÷Ä’Ø’µ’°’∂ ’∫’°’ø’°’Ω’≠’°’∂’´÷Ä÷â
"""

    if reply_markup:
        msg = await update.message.reply_text(
            new_text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
    else:
        print("‚ö†Ô∏è reply_markup = None, ’∏÷Ç’≤’°÷Ä’Ø’æ’∏÷Ç’¥ ’ß ’°’º’°’∂÷Å ’Ø’∏’≥’°’Ø’∂’•÷Ä’´")  # ‚ùóÔ∏è
        msg = await update.message.reply_text(old_text)

    async def timeout_handler():
        try:
            await context.bot.send_message(...)
        except telegram.error.TimedOut:
            print("‚ö†Ô∏è Timeout ’ß ’ø’•’≤’´ ’∏÷Ç’∂’•÷Å’•’¨÷â Message ’π’∞’°’Ω’°’æ÷â")
        if user_id in user_state and user_state[user_id]["question"]["id"] == question["id"]:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚è∞ ‘∫’°’¥’°’∂’°’Ø’® ’Ω’∫’°’º’æ’•÷Å÷â ’Ä’°’ª’∏÷Ä’§ ’∞’°÷Ä÷Å’® ’Ω’ø’°’∂’°’¨’∏÷Ç ’∞’°’¥’°÷Ä ’£÷Ä’´÷Ä /next÷â"
            )
            user_state.pop(user_id)

    task = asyncio.create_task(timeout_handler())

    user_state[user_id] = {
        "question": question,
        "message_id": msg.message_id,
        "timer_task": task
    }

# ‚úÖ ‘±’æ’•’¨’°÷Å÷Ä’∏÷Ç ’Ω’°
def cancel_timer(user_id: str):
    if user_id in user_state and user_state[user_id].get("timer_task"):
        user_state[user_id]["timer_task"].cancel()
